// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          ROLE?           @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Practices IeltsPractices[]
}

enum ROLE {
  ADMIN
  INSTRUCTOR
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model IeltsPractices {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  skill       SKILL
  title       String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isCompleted Boolean
  accessCount Int

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ListeningPractices ListeningPractices[]
}

model ListeningPractices {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  practiceId     String @db.ObjectId
  part           Int
  title          String
  audioUrl       String
  content        String
  questions      Json
  answers        Json
  correctAnswers Json
  result         Int

  practice IeltsPractices @relation(fields: [practiceId], references: [id], onDelete: Cascade)
}

model IeltsTips {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  skill       SKILL
  title       String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SKILL {
  LISTENING
  READING
  WRITING
  SPEAKING
}
