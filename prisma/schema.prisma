// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          ROLE?     @default(USER)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ListeningTest model
model ListeningTest {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  title      String             @unique
  sections   ListeningSection[]
  isTimed    Boolean            @default(false)
  transcript String? // Optional transcript displayed after test

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// ListeningSection model
model ListeningSection {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  sectionTitle String
  audioURL     String
  questions    ListeningQuestion[]
  testId       String              @db.ObjectId
  test         ListeningTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// ListeningQuestion model
model ListeningQuestion {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  questionText  String
  type          QuestionType
  answer        Json?
  correctAnswer String
  sectionId     String           @db.ObjectId
  section       ListeningSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

// ReadingTest model
model ReadingTest {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String    @unique
  passages Passage[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// Passage model for ReadingTest
model Passage {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  passageTitle String
  content      String
  questions    ReadingQuestion[]
  testId       String            @db.ObjectId
  test         ReadingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// ReadingQuestion model
model ReadingQuestion {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  questionTitle       String?
  questionDescription String?
  questionText        String
  type                QuestionType
  answer              Json? // MULTIPLE_CHOICE: {"options":"option":"A","content":"A reason that contributes to light pollution."} or FILL_IN_THE_BLANK: {}
  correctAnswer       String
  passageId           String       @db.ObjectId
  passage             Passage      @relation(fields: [passageId], references: [id], onDelete: Cascade)
}

// WritingTest model
model WritingTest {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String  @unique
  task1Title        String
  task2Title        String
  task1_description String
  task2_description String
  task1_imageURL    String?
  task2_imageURL    String?
  task1_word_limit  Int?
  task2_word_limit  Int?
  task1_answer      String? // For user's answer
  task2_answer      String? // For user's answer

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// SpeakingTest model
model SpeakingTest {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String             @unique
  questions        SpeakingQuestion[]
  timingGuidelines Json // Example: {"part1": "4-5 mins", "part2": "1-2 mins", "part3": "4-5 mins"}
  topics           Json // List of common topics

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// SpeakingQuestion model
model SpeakingQuestion {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  questionText String
  responseType ResponseType
  testId       String       @db.ObjectId
  test         SpeakingTest @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// IeltsTips model
model IeltsTips {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  skill       Skill
  title       String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TestHistory {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  listeningTestId String?  @db.ObjectId
  readingTestId   String?  @db.ObjectId
  writingTestId   String?  @db.ObjectId
  speakingTestId  String?  @db.ObjectId
  score           Float // Store the score (could be out of 9 or other scale)
  userAnswers     Json // Store the user's answers as JSON (for example, multiple choice or text answers)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations to specific test types (optional, depending on which test was taken)
  listeningTest ListeningTest? @relation(fields: [listeningTestId], references: [id], onDelete: Cascade)
  readingTest   ReadingTest?   @relation(fields: [readingTestId], references: [id], onDelete: Cascade)
  writingTest   WritingTest?   @relation(fields: [writingTestId], references: [id], onDelete: Cascade)
  speakingTest  SpeakingTest?  @relation(fields: [speakingTestId], references: [id], onDelete: Cascade)
}

model InstructorRequest {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String // Store as hashed password
  ieltsProofPath String // Store file path or URL to IELTS proof document
  status         String   @default("PENDING") // Status: PENDING, APPROVED, REJECTED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Instructor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  dob         DateTime
  phone       String
  hometown    String
  address     String
  idCardImage String
  createdAt   DateTime @default(now())
}

// Enumerations
enum ROLE {
  ADMIN
  INSTRUCTOR
  USER
}

enum Skill {
  LISTENING
  READING
  WRITING
  SPEAKING
}

enum QuestionType {
  FILL_IN_THE_BLANK
  MULTIPLE_CHOICE
  SHORT_ANSWER
}

enum ResponseType {
  TEXT
  AUDIO
}
