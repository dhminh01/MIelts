// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          ROLE?     @default(USER)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  TestHistory TestHistory[]
  // callsInitiated VideoCall[]   @relation("caller") // User as the caller
  // callsReceived  VideoCall[]   @relation("receiver") // User as the receiver
  UserWallet  UserWallet[]

  RequestInfo RequestInfo[]
  RequestFee  RequestFee[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model VerificationToken {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// ListeningTest model
model ListeningTest {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  title      String             @unique
  sections   ListeningSection[]
  isTimed    Boolean            @default(false)
  transcript String? // Optional transcript displayed after test

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// ListeningSection model
model ListeningSection {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  sectionTitle String
  audioURL     String
  questions    ListeningQuestion[]
  testId       String              @db.ObjectId
  test         ListeningTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// ListeningQuestion model
model ListeningQuestion {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  questionText  String
  type          QuestionType
  answer        Json?
  correctAnswer String
  sectionId     String           @db.ObjectId
  section       ListeningSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

// ReadingTest model
model ReadingTest {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String    @unique
  passages Passage[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// Passage model for ReadingTest
model Passage {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  passageTitle String
  content      String
  questions    ReadingQuestion[]
  testId       String            @db.ObjectId
  test         ReadingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
}

// ReadingQuestion model
model ReadingQuestion {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  questionTitle       String?
  questionDescription String?
  questionText        String
  type                QuestionType
  answer              Json? // MULTIPLE_CHOICE: {"options":"option":"A","content":"A reason that contributes to light pollution."} or FILL_IN_THE_BLANK: {}
  correctAnswer       String
  passageId           String       @db.ObjectId
  passage             Passage      @relation(fields: [passageId], references: [id], onDelete: Cascade)
}

// WritingTest model
model WritingTest {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String  @unique
  task1Title        String
  task2Title        String
  task1_description String
  task2_description String
  task1_imageURL    String?
  task2_imageURL    String?
  task1_word_limit  Int?
  task2_word_limit  Int?
  task1_answer      String? // For user's answer
  task2_answer      String? // For user's answer

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TestHistory TestHistory[]
}

// SpeakingTest model
model SpeakingTest {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TestHistory  TestHistory[]
  SpeakingPart SpeakingPart[]
}

model SpeakingPart {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String //Part 1: , Part2: , ...
  description      String //Example: his part is about yourself,...
  testId           String             @db.ObjectId
  test             SpeakingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  SpeakingQuestion SpeakingQuestion[]
}

// SpeakingQuestion model
model SpeakingQuestion {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  questionText String
  responseType ResponseType @default(AUDIO)
  partId       String       @db.ObjectId
  part         SpeakingPart @relation(fields: [partId], references: [id], onDelete: Cascade)
}

// IeltsTips model
model IeltsTips {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  skill       Skill
  title       String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TestHistory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  listeningTestId String?   @db.ObjectId
  readingTestId   String?   @db.ObjectId
  writingTestId   String?   @db.ObjectId
  speakingTestId  String?   @db.ObjectId
  audioURL        String?
  score           Float? // Store the score (could be out of 9 or other scale)
  userAnswers     Json? // Store the user's answers as JSON (for example, multiple choice or text answers)
  comments        Comment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations to specific test types (optional, depending on which test was taken)
  listeningTest ListeningTest? @relation(fields: [listeningTestId], references: [id], onDelete: Cascade)
  readingTest   ReadingTest?   @relation(fields: [readingTestId], references: [id], onDelete: Cascade)
  writingTest   WritingTest?   @relation(fields: [writingTestId], references: [id], onDelete: Cascade)
  speakingTest  SpeakingTest?  @relation(fields: [speakingTestId], references: [id], onDelete: Cascade)
}

//User request models for grading purpose

model RequestFee {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  instructorId String   @db.ObjectId
  speakingFee  Float    @default(0.0)
  writingFee   Float    @default(0.0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  instructor User @relation(fields: [instructorId], references: [id], onDelete: Cascade)
}

model RequestInfo {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  testHistoryId String
  instructorId  String

  status    RequestStatus @default(PENDING) // Trạng thái yêu cầu (PENDING, ACCEPTED, DECLINED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Các mối quan hệ
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Instructor {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  dob         DateTime
  phone       String
  hometown    String
  address     String
  idCardImage String
  certProof   String
  createdAt   DateTime    @default(now())
}


//User wallet
model UserWallet {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  amount   Float  @default(0)
  currency String @default("USD")
  userId   String @unique @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model VideoCall {
//   id         String     @id @default(auto()) @map("_id") @db.ObjectId
//   callerId   String     @db.ObjectId
//   receiverId String     @db.ObjectId
//   status     CallStatus @default(PENDING) // Enum: PENDING, ONGOING, ENDED
//   startTime  DateTime?
//   endTime    DateTime?
//   createdAt  DateTime   @default(now())

//   caller   User @relation("caller", fields: [callerId], references: [id])
//   receiver User @relation("receiver", fields: [receiverId], references: [id])
// }

//BLOG HERE!!!!!!!!
model BlogPost {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorName  String
  authorEmail String
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  authorName    String
  authorEmail   String
  postId        String?      @db.ObjectId
  testHistoryId String?      @db.ObjectId
  post          BlogPost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  TestHistory   TestHistory? @relation(fields: [testHistoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enumerations
enum ROLE {
  ADMIN
  INSTRUCTOR
  USER
}

enum Skill {
  LISTENING
  READING
  WRITING
  SPEAKING
}

enum QuestionType {
  FILL_IN_THE_BLANK
  MULTIPLE_CHOICE
  SHORT_ANSWER
}

enum ResponseType {
  TEXT
  AUDIO
}

// enum CallStatus {
//   PENDING
//   ONGOING
//   ENDED
// }

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
